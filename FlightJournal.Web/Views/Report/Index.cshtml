@using FlightJournal.Web
@using FlightJournal.Web.Controllers
@using FlightJournal.Web.Extensions
@using FlightJournal.Web.Translations
@model FlightJournal.Web.Models.ReportViewModel
@{
    var root = "/";
    if (Request.IsClub())
    {
        ViewBag.Title = _("Day report {0} {1}", Model.FormattedDate, Request.Club().Name);
        // When root Action has problems identifying that the date is allready part of the path
        root = Url.Action("Index", "Report");
    }
    else
    {
        ViewBag.Title = _("Month report {0}", Model.FormattedDate);
    }
    var weekName = _("Week");
}

@section head
{
    <style>
        .termik {
            font-weight: bold;
            background-color: Lime;
        }
    </style>
}

@section scripts
{
    <script type="text/javascript">

    $(document).ready(function () {

        function available(date) {
            dmy = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
            @if (Model.AvailableDates != null)
                {
                    foreach (var item in Model.AvailableDates.Keys)
                    {
                        @Html.Raw(string.Format("if (dmy == \"{0}\") return [true, \"{1}\", \"{2}\"];"
                            , item.ToString("yyyy-M-d")
                            , (Model.AvailableDates[item] > 20) ? "termik" : "" // Css class set on date field for illustrating high activity
                            , string.Format(_("{0} starts."), Model.AvailableDates[item])));
                    }
                }
            return [false, "", "@_("no flying")"];
        }

        function selectDate(dmy) {
            // Redirect page to date report
            @if (!Request.IsClub() || string.IsNullOrWhiteSpace(Request.Club().ShortName))
            {
                <text>location = '/' + dmy;</text>
            }else{
                <text>location = '/@Server.UrlPathEncode(Request.Club().ShortName)/' + dmy;</text>
            }
        }

        $("#datepicker").datepicker({
            beforeShowDay: available,
            maxDate: 0,
            showWeek: true,
            numberOfMonths: 4,
            onSelect: selectDate,
            firstDay: 1,
            weekHeader: '@weekName',
            dateFormat: "yy-mm-dd",
            dayNamesMin: [@Html.Raw(_("'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'"))]
        });

        $("#datepickertablet").datepicker({
            beforeShowDay: available,
            maxDate: 0,
            showWeek: true,
            numberOfMonths: 2,
            onSelect: selectDate,
            firstDay: 1,
            weekHeader: '@weekName',
            dateFormat: "yy-mm-dd",
            dayNamesMin: [@Html.Raw(_("'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'"))]
        });

        $("#datepickermobil").datepicker({
            beforeShowDay: available,
            maxDate: 0,
            showWeek: true,
            numberOfMonths: 1,
            onSelect: selectDate,
            firstDay: 1,
            weekHeader: '@weekName',
            dateFormat: "yy-mm-dd",
            dayNamesMin: [@Html.Raw(_("'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'"))]
        });


        $("#datepicker").datepicker("setDate", '@Model.Date.ToString("yyyy-MM-dd")');
        $("#datepickertablet").datepicker("setDate", '@Model.Date.ToString("yyyy-MM-dd")');
        $("#datepickermobil").datepicker("setDate", '@Model.Date.ToString("yyyy-MM-dd")');

        $(".tablesorter").tablesorter();
    });
    </script>
}
@*#HACK: for allowing the mobil view to function better we introduce this fix*@
<div align="center" class="hidden-print" style="font-size: 0.82em">
    <div id="datepicker" class="visible-md visible-lg">
    </div>
    <div id="datepickertablet" class="visible-sm" style="margin-top: 60px">
    </div>
    <div id="datepickermobil" class="visible-xs">
    </div>
</div>
<br class="clearfix" />
@if (Model.Flights.Any())
{
    if (Model.DistinctLocations.Count() > 1)
    {
        <div class="btn-group">
            @foreach (var item in Model.DistinctLocations)
            {
                <a href="#@item.LocationId" class="btn btn-default">@item.ToString(Request.Club().Country)</a>
            }
        </div>
    }

    foreach (var location in Model.DistinctLocations)
    {
        var headerMetadata = Model.Flights.FirstOrDefault();
        bool enableStartTypeColumn = Model.ClubFlights.Any(d => d.StartedFromId == location.LocationId)
            && Model.Flights.Where(d => d.StartedFromId == location.LocationId).Select(s => s.StartType.ShortName).Distinct().Count() > 1;
        bool enableTachoColumn = Model.ClubFlights.Where(d => d.StartedFromId == location.LocationId).ToList().Sum(s => s.Tacho) > 0;
        bool enableNoteColumn = Model.ClubFlights.Any(d => d.StartedFromId == location.LocationId)
            && Model.ClubFlights.Where(d => d.StartedFromId == location.LocationId).Sum(s => (s.Description + "").Length) > 0;

        <a name="@location.LocationId"></a>
        <h2>
            @location.ToString(Request.Club().Country) @Model.Date.ToShortDateString() <small>@(Request.IsClub() ? @Request.Club().Name : string.Empty)</small>
        </h2>
        <table class="tablesorter table table-responsive table-striped table-hover table-condensed">
            <thead>
                <tr>
                    <th>
                        #
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => headerMetadata.Duration)
                    </th>
                    <th>
                        @_("Plane")
                    </th>
                    <th>
                        @_("Pilot(s)")
                    </th>
                    @if (enableStartTypeColumn)
                    {
                        <th class="hidden-xs hidden-sm"></th>
                    }
                    <th>
                        @Html.DisplayNameFor(model => headerMetadata.StartedFrom)
                    </th>
                    <th class="hidden-xs">
                        @Html.DisplayNameFor(model => headerMetadata.LandedOn)
                    </th>
                    @if (enableTachoColumn)
                    {
                        <th class="hidden-xs hidden-sm text-right">
                            @Html.DisplayNameFor(model => headerMetadata.Tacho) &nbsp;&nbsp;
                        </th>
                    }
                    @if (enableNoteColumn)
                    {
                        <th class="hidden-xs text-right">
                            @Html.DisplayNameFor(model => headerMetadata.Description) &nbsp;&nbsp;
                        </th>
                    }
                    <th class="hidden-print">
                    </th>
                </tr>
            </thead>
            <tbody>
                @{ int startNr = 1; }
                @foreach (var item in Model.Flights.Where(d => d.StartedFromId == location.LocationId))
                {
                    var style = new HtmlString(string.Empty);
                    if (item.Deleted.HasValue)
                    {
                        style = new HtmlString("style=\"text-decoration: line-through;\"");
                    }
                    <tr>
                        <td>
                            @if (!item.Deleted.HasValue)
                            {
                                @(startNr)
                                if (item.LandingCount > 1)
                                {
                                    startNr = startNr + item.LandingCount - 1;
                                    <text> - </text>
                                    @(startNr)
                                }
                                startNr++;
                            }
                            else
                            {
                                <span class="fa fa-trash-o"></span>
                            }
                        </td>
                        <td @style align="right">
                            @Html.DisplayFor(modelItem => item, "Duration")
                        </td>
                        <td @style>
                            @Html.DisplayFor(modelItem => item.Plane, "Plane")
                        </td>
                        <td @style>
                            @Html.DisplayFor(modelItem => item, "Pilots")
                        </td>
                        @if (enableStartTypeColumn)
                        {
                            <td @style class="hidden-xs hidden-sm text-center">
                                @(item.StartType.LocalizedShortName)
                                <!--@Html.DisplayFor(modelItem => item.StartType, "StartType")-->
                            </td>
                        }
                        <td @style align="right">
                            @Html.DisplayFor(modelItem => item, "Departure")
                        </td>
                        <td @style class="hidden-xs text-right">
                            @Html.DisplayFor(modelItem => item, "Landing")
                            @Html.DisplayFor(modelItem => item, "LandedOn")
                        </td>
                        @if (enableTachoColumn)
                        {
                            <td @style class="hidden-xs hidden-sm text-right">
                                @Html.DisplayFor(modelItem => item, "Tacho")
                            </td>
                        }
                        @if (enableNoteColumn)
                        {
                            <td @style class="hidden-xs">
                                @Html.DisplayFor(modelItem => item.Description, "Description")
                            </td>
                        }
                        <td class="hidden-print text-right">
                            @if (Request.IsPilot() && item.IsCurrentClubPilots())
                            {
                                if (User.IsEditor() || item.Date.AddDays(3) >= DateTime.Now)
                                {
                                    @Html.ActionLink(_("Edit"), "Edit", "Flight", new { id = item.FlightId }, new { @class = "btn btn-default btn-xs" }, "fa fa-pencil-square-o fa-fw")
                                }
                            }
                            @Html.ActionLink(_("Details"), "Details", "Flight", new { id = item.FlightId }, new { @class = "btn btn-default btn-xs" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        {

            var startTypeStatistics = new List<string>();
            foreach (var byStartType in Model.Flights.Where(d => d.StartedFromId == location.LocationId && !d.Deleted.HasValue).GroupBy(f=>f.StartType))
            {
                int total_starts = byStartType.Count();
                int total_starts_by_landingCount = total_starts == 0 ? 0 : byStartType.Sum(f => f.LandingCount);
                string formatted_total_starts = total_starts_by_landingCount.ToString();
                if (total_starts != total_starts_by_landingCount)
                {
                    formatted_total_starts += " (" + total_starts + ")";
                }
                startTypeStatistics.Add($"{byStartType.Key.LocalizedShortName}: {formatted_total_starts}");
            }
            
            <p style="color: silver" class="noprint pull-right">
                <em title="@_("Total landing count (Total flights registered)")">@string.Join(" / ", startTypeStatistics)</em>
            </p>
        }
        <p style="color: silver" class="noprint">
            <em>@_("Editing is restricted after 48 hours.")</em>
        </p>
    }

<br style="page-break-after: always;" />
    
if (Request.IsClub())
{
    Html.RenderPartial("_Logbook", Model);
}
else // @if (Request.IsClub())
{
    <p>
        @foreach (var club in Model.Flights.Where(f => f.Deleted == null).GroupBy(f => f.Pilot.Club).OrderByDescending(o => o.Count()))
        {
            <a href="@Path.Combine(root, club.Key.ShortName, Model.Date.ToString("yyyy-MM-dd"))" class="btn btn-primary">@Html.Raw(_("{0} logbooks {1} take-offs {2} hours", club.Key.ShortName, club.Sum(f => f.LandingCount), club.ToList().Sum(f => f.Duration.Ticks).TotalHoursWithMinutesAsDecimal()))</a>
        }
    </p>
}
}
else //if (Model.Flights.Any())
{
<p>@_("No flights registered on {0}",Model.FormattedDate)</p>
}
<br />
<p>
    <a href="@Path.Combine(root, Model.Date.ToString("yyyy"))" class="btn btn-primary">@Html.Raw(string.Format(_("Statistics for {0}"), Model.Date.ToString("yyyy")))</a>
    <a href="@Path.Combine(root, Model.Date.ToString("yyyy-MM"))" class="btn btn-primary">@Html.Raw(string.Format(_("Statistics for {0}"), Model.Date.ToString("MMMM")))</a>
</p>
