@using FlightJournal.Web.Extensions
@using FlightJournal.Web.Configuration
@using FlightJournal.Web.Models
@model FlightJournal.Web.Models.LogbookViewModel
@{
    var flightsDataset = Model.Flights.Where(f => f.Date.Year == Model.Year);

    ViewBag.Title = _("Logbook") + " " + Model.Year;
}

@if (Model.TrainingBarometerEnabled)
{
    <span class="pull-right text-right">
        @Model.TrainingBarometer.Last12MonthDepartures starter og @Model.TrainingBarometer.Last12MonthDuration.TotalHoursWithMinutesAsDecimal() timer de sidste 12 måneder
        <br /><a href="https://medlem.dsvu.dk/grp500/171-uhb599-traeningsbarometer-pdf/file/menu-id-117">Træningsbarometer</a> er i <span style="color:@Model.TrainingBarometer.BarometerColorCode;"><b>@Model.TrainingBarometer.BarometerLabel</b></span>
        <br /><em>@Model.TrainingBarometer.BarometerRecommendation</em>
    </span>
}

<p>
    <div class="btn-group">
        @Html.ActionLink((Model.Year - 1).ToString(), "Index", "Logbook", new { club = Request.Pilot().Club.ShortName, year = Model.Year - 1 }, new { Class = "btn btn-default" })
        <a href="@Url.Action("Index", "Logbook", new { club = Request.Pilot().Club.ShortName, year = Model.Year })" class="btn btn-info"><span class="glyphicon glyphicon-stats"></span> <strong>@Model.Year</strong></a>
        @if (DateTime.Now.Year >= Model.Year)
        {
            @Html.ActionLink((Model.Year + 1).ToString(), "Index", "Logbook", new { club = Request.Pilot().Club.ShortName, year = Model.Year + 1 }, new { Class = "btn btn-default" })
        }
    </div>
    @*@if (Model.Flights.Any())
        {
            <a href="@Url.Action("Export", "Report", new { year = Model.Date.Year })" class="btn btn-info pull-right"><span class="glyphicon glyphicon-cloud-download"></span> Eksporter startlisten for @Model.Date.ToString("yyyy")</a>
        }*@
</p>
@{
    IHtmlString AddFlightActivityRow(string title, FlightActivityViewModel a)
    {
        var since = _("Since");
        var daysAgo = _("days ago");
        var first = a.PartialData ? $"({since} {a.FirstFlightDate.ToShortDateString()} - {Math.Floor((DateTime.Now - a.FirstFlightDate).TotalDays)} {daysAgo}) " : "";
        return Html.Raw($"<tr><td>{title}</td><td>{a.NumberOfFlights}</td><td>{TimeSpan.FromHours(a.Hours)}</td><td>{first}</td><tr>");
    }
}
@if (Model.TrainingBarometerEnabled)
{
<h2>@_("Activity") <small>@Model.Pilot.Name</small></h2>
    <table class="tablesorter table table-striped table-hover table-condensed table-bordered">
        <thead>
            <tr><th></th><th>@_("Count")</th><th>@_("Duration")</th><th></th></tr>
        </thead>
        <tbody>
            @AddFlightActivityRow(@_("Last 12 months"), Model.ActivityInLast12Months)
            @AddFlightActivityRow(@_("Last 24 months"), Model.ActivityInLast24Months)
            @AddFlightActivityRow(@_("Last 36 months"), Model.ActivityInLast36Months)
            @if (Model.Pilot.IsInstructor)
            {
                <tr><td colspan="4"><i>@_("As instructor")</i></td></tr>
                @AddFlightActivityRow(@_("Last 12 months"), Model.InstructorActivityInLast12Months)
                @AddFlightActivityRow(@_("Last 24 months"), Model.InstructorActivityInLast24Months)
                @AddFlightActivityRow(@_("Last 36 months"), Model.InstructorActivityInLast36Months)
            }
        </tbody>
    </table>
}


<h2>
    @_("Logbook") <small>@Model.Pilot.Name</small>
</h2>
<table class="tablesorter table table-striped table-hover table-condensed table-bordered">
    <thead>
        <tr>
            <th>
                @_("Pilot")/@_("Co-Pilot")
            </th>
            <th></th>
            <th>
                @_("Count")
            </th>
            <th>
                @_("Duration")
            </th>
            <th colspan="2">
                Jan
            </th>
            <th colspan="2">
                Feb
            </th>
            <th colspan="2">
                Mar
            </th>
            <th colspan="2">
                Apr
            </th>
            <th colspan="2">
                Maj
            </th>
            <th colspan="2">
                Jun
            </th>
            <th colspan="2">
                Jul
            </th>
            <th colspan="2">
                Aug
            </th>
            <th colspan="2">
                Sep
            </th>
            <th colspan="2">
                Okt
            </th>
            <th colspan="2">
                Nov
            </th>
            <th colspan="2">
                Dec
            </th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in from c in flightsDataset.Where(f => f.PilotId == Model.Pilot.PilotId)
                             group c by new { c.Pilot, c.StartType } into g
                             select new { Pilot = g.Key.Pilot, StartType = g.Key.StartType, ItemFlights = g })
        {
            <tr>
                <td>
                    @item.Pilot.Name
                </td>
                <td>@item.StartType.LocalizedShortName</td>
                <td align="right">
                    @item.ItemFlights.Sum(f => f.LandingCount)
                </td>
                <td align="right">
                    @item.ItemFlights.Sum(f => f.Duration.Ticks).TotalHoursWithMinutesAsDecimal()
                </td>
                @for (int i = 1; i <= 12; i++)
                {
                    var count = item.ItemFlights.Where(f => f.Date.Month == i).Sum(f => f.LandingCount);
                    <td align="right">
                        @((count > 0) ? count.ToString() : "")
                    </td>
                    <td align="right">
                        @item.ItemFlights.Where(f => f.Date.Month == i).Sum(f => f.Duration.Ticks).TotalHoursWithMinutesAsDecimal()
                    </td>
                }
            </tr>
        }
        @foreach (var item in from c in flightsDataset.Where(f => f.PilotBackseatId == Model.Pilot.PilotId)
                             group c by new { c.PilotBackseat, c.StartType } into g
                             select new { Pilot = g.Key.PilotBackseat, StartType = g.Key.StartType, ItemFlights = g })
        {
            <tr>
                <td>
                    @item.Pilot.Name (@_("Co-Pilot"))
                </td>
                <td>@item.StartType.LocalizedShortName</td>
                <td align="right">
                    @item.ItemFlights.Sum(f => f.LandingCount)
                </td>
                <td align="right">
                    @item.ItemFlights.Sum(f => f.Duration.Ticks).TotalHoursWithMinutesAsDecimal()
                </td>
                @for (int i = 1; i <= 12; i++)
                {
                    var count = item.ItemFlights.Count(f => f.Date.Month == i);
                    <td align="right">
                        @(count != 0 ? count.ToString() : "")
                    </td>
                    <td align="right">
                        @item.ItemFlights.Where(f => f.Date.Month == i).Sum(f => f.Duration.Ticks).TotalHoursWithMinutesAsDecimal()
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<div class="row">
    <div class="col-md-6">
        <table class="tablesorter table table-striped table-hover table-condensed">
            <thead>
                <tr>
                    <th>
                        @_("Plane")
                    </th>
                    <th>
                        @_("Pilot")
                    </th>
                    <th></th>
                    <th>
                        @_("Count")
                    </th>
                    <th>
                        @_("Duration")
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in from c in flightsDataset
                                     where c.PilotId == Model.Pilot.PilotId
                                     group c by new { c.Pilot, c.Plane, c.StartType } into g
                                     select new { Pilot = g.Key.Pilot, Plane = g.Key.Plane, StartType = g.Key.StartType, ItemFlights = g })
                {
                    <tr>
                        <td>
                            @item.Plane
                        </td>
                        <td>
                            @item.Pilot.Name
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartType, "StartType")
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f => f.LandingCount)
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f => f.Duration.Ticks).TotalHoursWithMinutesAsDecimal()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        <table class="tablesorter table table-striped table-hover table-condensed">
            <thead>
                <tr>
                    <th>
                        @_("Plane")
                    </th>
                    <th>
                        @_("Co-Pilot")
                    </th>
                    <th></th>
                    <th>
                        @_("Count")
                    </th>
                    <th>
                        @_("Duration")
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in from c in flightsDataset
                                     where c.PilotBackseatId == Model.Pilot.PilotId
                                     group c by new { c.PilotBackseat, c.Plane, c.StartType } into g
                                     select new { PilotBackseat = g.Key.PilotBackseat, Plane = g.Key.Plane, StartType = g.Key.StartType, ItemFlights = g })
                {
                    <tr>
                        <td>
                            @item.Plane
                        </td>
                        <td>
                            @item.PilotBackseat.Name
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.StartType, "StartType")
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f => f.LandingCount)
                        </td>
                        <td align="right">
                            @item.ItemFlights.Sum(f => f.Duration.Ticks).TotalHoursWithMinutesAsDecimal()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<br style="page-break-after: always;" />
<h2>
    @_("Startlist") <small>@Model.Pilot.Name</small>
</h2>
@{
    bool enableLogStartTypeColumn = flightsDataset.Select(s => s.StartType).Distinct().Count() > 1;
    bool enableLogTachoColumn = flightsDataset.ToList().Sum(s => s.Tacho) > 0;
    bool enableLandingCountColumn = flightsDataset.ToList().Exists(s => s.LandingCount != 1);
}

<table class="tablesorter table table-responsive table-striped table-hover table-condensed">
    <thead>
        <tr>
            <th>
                @_("Date")
            </th>
            <th>
                @_("Plane")
            </th>
            <th>
                @_("Pilot(s)")
            </th>
            <th></th>
            <th>
                @_("Duration")
            </th>
            @if (enableLandingCountColumn)
            {
                <th>
                    @_("Landing Count")
                </th>
            }
            <th class="hidden-sm">
                @_("Airfield")
            </th>
            @if (enableLogTachoColumn)
            {
                <th class="hidden-sm">
                    @_("Tacho")
                </th>
            }
            <th class="hidden-xs">
                @_("Description")
            </th>
            <th>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in flightsDataset.OrderByDescending(d => d.Departure))
        {
            <tr>
                <td>
                    @item.Date.ToShortDateString()
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Plane)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item, "Pilots")
                </td>
                <td class="hidden-xs hidden-sm text-center">
                    @Html.DisplayFor(modelItem => item.StartType, "StartType")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item, "Duration")
                </td>
                @if (enableLandingCountColumn)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item, "LandingCount")
                    </td>
                }
                <td class="hidden-sm">
                    @Html.DisplayFor(modelItem => item, "StartedFrom")
                    @Html.DisplayFor(modelItem => item, "LandedOn")
                </td>
                @if (enableLogTachoColumn)
                {
                    <td class="hidden-sm text-right">
                        @Html.DisplayFor(modelItem => item, "Tacho")
                    </td>
                }
                <td class="hidden-xs">
                    @Html.DisplayFor(modelItem => item.Description, "Description")
                </td>
                <td class="text-right">
                    @Html.ActionLink(_("Details"), "Details", "Flight", new { id = item.FlightId }, new { @class = "btn btn-info" })
                </td>
            </tr>
        }
    </tbody>
</table>


@section head
{
    @if (Demo.IsLocalDevEnvironment())
    {
        if (Demo.IsDemoEnvironment())
        {
            <script src="~/Scripts/vue.js"></script>
        }
        else
        {
            <script src="~/Scripts/vue.min.js"></script>
        }
    }

    <style>
        [v-cloak] {
            display: none;
        }
    </style>
}

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            $(".tablesorter").tablesorter();
        });
    </script>

    @if (Demo.IsLocalDevEnvironment() && Demo.IsDemoEnvironment())
    {
        <script type="text/javascript">
            var app = new Vue({
                el: '#app',
                data: {
                    message: 'Hello Vue!'
                }
            })


            // localStorage persistence
            var STORAGE_KEY = 'todos-vuejs-2.0'
            var todoStorage = {
                fetch: function () {
                    var todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]')
                    todos.forEach(function (todo, index) {
                        todo.id = index
                    })
                    todoStorage.uid = todos.length
                    return todos
                },
                save: function (todos) {
                    localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))
                }
            }

            // visibility filters
            var filters = {
                all: function (todos) {
                    return todos
                },
                active: function (todos) {
                    return todos.filter(function (todo) {
                        return !todo.completed
                    })
                },
                completed: function (todos) {
                    return todos.filter(function (todo) {
                        return todo.completed
                    })
                }
            }

            // app Vue instance
            var app = new Vue({
                // app initial state
                data: {
                    todos: todoStorage.fetch(),
                    newTodo: '',
                    editedTodo: null,
                    visibility: 'all'
                },

                // watch todos change for localStorage persistence
                watch: {
                    todos: {
                        handler: function (todos) {
                            todoStorage.save(todos)
                        },
                        deep: true
                    }
                },

                // computed properties
                // http://vuejs.org/guide/computed.html
                computed: {
                    filteredTodos: function () {
                        return filters[this.visibility](this.todos)
                    },
                    remaining: function () {
                        return filters.active(this.todos).length
                    },
                    allDone: {
                        get: function () {
                            return this.remaining === 0
                        },
                        set: function (value) {
                            this.todos.forEach(function (todo) {
                                todo.completed = value
                            })
                        }
                    }
                },

                filters: {
                    pluralize: function (n) {
                        return n === 1 ? 'item' : 'items'
                    }
                },

                // methods that implement data logic.
                // note there's no DOM manipulation here at all.
                methods: {
                    addTodo: function () {
                        var value = this.newTodo && this.newTodo.trim()
                        if (!value) {
                            return
                        }
                        this.todos.push({
                            id: todoStorage.uid++,
                            title: value,
                            completed: false
                        })
                        this.newTodo = ''
                    },

                    removeTodo: function (todo) {
                        this.todos.splice(this.todos.indexOf(todo), 1)
                    },

                    editTodo: function (todo) {
                        this.beforeEditCache = todo.title
                        this.editedTodo = todo
                    },

                    doneEdit: function (todo) {
                        if (!this.editedTodo) {
                            return
                        }
                        this.editedTodo = null
                        todo.title = todo.title.trim()
                        if (!todo.title) {
                            this.removeTodo(todo)
                        }
                    },

                    cancelEdit: function (todo) {
                        this.editedTodo = null
                        todo.title = this.beforeEditCache
                    },

                    removeCompleted: function () {
                        this.todos = filters.active(this.todos)
                    }
                },

                // a custom directive to wait for the DOM to be updated
                // before focusing on the input field.
                // http://vuejs.org/guide/custom-directive.html
                directives: {
                    'todo-focus': function (el, binding) {
                        if (binding.value) {
                            el.focus()
                        }
                    }
                }
            })

            // handle routing
            function onHashChange() {
                var visibility = window.location.hash.replace(/#\/?/, '')
                if (filters[visibility]) {
                    app.visibility = visibility
                } else {
                    window.location.hash = ''
                    app.visibility = 'all'
                }
            }

            window.addEventListener('hashchange', onHashChange)
            onHashChange()

            // mount
            app.$mount('.todoapp')
        </script>

        <script src="https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"></script>
        <script>
            var watchExampleVM = new Vue({
                el: '#watch-example',
                data: {
                    question: '',
                    answer: 'I cannot give you an answer until you ask a question!'
                },
                watch: {
                    // whenever question changes, this function will run
                    question: function (newQuestion, oldQuestion) {
                        this.answer = 'Waiting for you to stop typing...'
                        this.debouncedGetAnswer()
                    }
                },
                created: function () {
                    // _.debounce is a function provided by lodash to limit how
                    // often a particularly expensive operation can be run.
                    // In this case, we want to limit how often we access
                    // yesno.wtf/api, waiting until the user has completely
                    // finished typing before making the ajax request. To learn
                    // more about the _.debounce function (and its cousin
                    // _.throttle), visit: https://lodash.com/docs#debounce
                    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)
                },
                methods: {
                    getAnswer: function () {
                        if (this.question.indexOf('?') === -1) {
                            this.answer = 'Questions usually contain a question mark. ;-)'
                            return
                        }
                        this.answer = 'Thinking...'
                        var vm = this
                        axios.get('https://yesno.wtf/api')
                            .then(function (response) {
                                vm.answer = _.capitalize(response.data.answer)
                            })
                            .catch(function (error) {
                                vm.answer = 'Error! Could not reach the API. ' + error
                            })
                    }
                }
            })
        </script>
    }
}

@if (Demo.IsLocalDevEnvironment() && Demo.IsDemoEnvironment())
{
    <hr />
    <h1>Vue framework workshop</h1>
    <p>The below is work in progress</p>
    <hr />
    <h2>Hello world Vue app</h2>
    <div id="app">
        {{ message }}
    </div>
    <hr />
    <h2>Todo Vue app</h2>
    <section class="todoapp">
        <header class="header">
            <h1>todos</h1>
            <input class="new-todo"
                   autofocus autocomplete="off"
                   placeholder="What needs to be done?"
                   v-model="newTodo"
                   @@keyup.enter="addTodo">
        </header>
        <section class="main" v-show="todos.length" v-cloak>
            <input id="toggle-all" class="toggle-all" type="checkbox" v-model="allDone">
            <label for="toggle-all"></label>
            <ul class="todo-list">
                <li v-for="todo in filteredTodos"
                    class="todo"
                    :key="todo.id"
                    :class="{ completed: todo.completed, editing: todo == editedTodo }">
                    <div class="view">
                        <input class="toggle" type="checkbox" v-model="todo.completed">
                        <label @@dblclick="editTodo(todo)">{{ todo.title }}</label>
                        <button class="destroy" @@click="removeTodo(todo)"></button>
                    </div>
                    <input class="edit" type="text"
                           v-model="todo.title"
                           v-todo-focus="todo == editedTodo"
                           @@blur="doneEdit(todo)"
                           @@keyup.enter="doneEdit(todo)"
                           @@keyup.esc="cancelEdit(todo)">
                </li>
            </ul>
        </section>
        <footer class="footer" v-show="todos.length" v-cloak>
            <span class="todo-count">
                <strong>{{ remaining }}</strong> {{ remaining | pluralize }} left
            </span>
            <ul class="filters">
                <li><a href="#/all" :class="{ selected: visibility == 'all' }">All</a></li>
                <li><a href="#/active" :class="{ selected: visibility == 'active' }">Active</a></li>
                <li><a href="#/completed" :class="{ selected: visibility == 'completed' }">Completed</a></li>
            </ul>
            <button class="clear-completed" @@click="removeCompleted" v-show="todos.length > remaining">
                Clear completed
            </button>
        </footer>
    </section>
    <footer class="info">
        <p>Double-click to edit a todo</p>
        <p>Written by <a href="http://evanyou.me">Evan You</a></p>
        <p>Part of <a href="http://todomvc.com">TodoMVC</a></p>
    </footer>

    <hr />
    <h2>Axios and lodash use in Vue app</h2>
    <div id="watch-example">
        <p>
            Ask a yes/no question:
            <input v-model="question">
        </p>
        <p>{{ answer }}</p>
    </div>

}